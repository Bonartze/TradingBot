name: trading_bot_ci.yml
on: [ push, pull_request ]
jobs:
  linters:
    runs-on: ubuntu-22.04
    steps:
      - name: Linters
        run: # todo

  stock_market_availability:
    runs-on: ubuntu-22.04
    steps:
      - name: stock market availability
        run: # todo

  build_library_api:
    runs-on: ubuntu-22.04
    steps:
      - name: build library api
        run: #todo

  build_project:
    runs-on: ubuntu-22.04
    steps:
      - name: build project
        run: #todo


  build_docker:
    runs-on: ubuntu-22.04
    steps:
      - name: build docker
        run: #todo


  backtesting:
    runs-on: ubuntu-22.04
    steps:
      - name: Install Python dependencies
        run: |
          python3 -m pip install --upgrade pip
          python3 -m pip install -r requirements.txt

      - name: Extract data for backtesting
        run: |
          set -e
          cd Backtesting
          for year in {2020..2024}
          do
            if [ ! -f "Data_extracted/5m/BTCUSDT/${year}.csv" ]; then
              python3 binance_stats.py BTCUSDT 5m $year >> data_extraction.log 2>&1
              echo "Data for year $year extracted."
            else
              echo "Data for year $year already exists. Skipping."
            fi
          done
          echo "Data extraction completed."

      - name: Build and run backtesting
        run: |
          set -e
          cd Backtesting
          rm -rf build && mkdir build && cd build
          cmake ../
          make || { echo "Build failed"; exit 1; }
          ./backtesting >> backtesting_results.log 2>&1
          echo "Backtesting completed."

      - name: Notify completion
        run: echo "Backtesting workflow completed successfully."

  docker_image_tests:
    runs-on: ubuntu-22.04
    steps:
      - name: Install Dependencies
        run: sudo apt-get update && sudo apt-get install -y build-essential cmake

      - name: Run Tests
        run: |
          set -e
          cd Autotests
          rm -rf build && mkdir build && cd build
          cmake ../ || { echo "CMake configuration failed"; exit 1; }
          make || { echo "Build failed"; exit 1; }
          ./test_ > test_results.log 2>&1 || { echo "Tests failed"; exit 1; }
          echo "Tests completed successfully."

      - name: Upload Test Results (Optional)
        if: always()
        uses: actions/upload-artifact@v3
        with:
          name: test-results
          path: Autotests/build/test_results.log


