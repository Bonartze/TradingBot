name: trading_bot_ci

on:
  push:
    branches:
      - "*"
  pull_request:
    branches:
      - "*"

jobs:
  build:
    runs-on: ubuntu-22.04
    steps:
      - name: Checkout repository
        uses: actions/checkout@v3
      - name: Set permissions for availability script
        run: chmod +x ./Scripts/build_server.sh
      - name: Build API and trading server
        run: cd Scripts && ./build_server.sh

  generate-docs:
    needs: build
    runs-on: ubuntu-22.04
    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Install dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y doxygen graphviz
          sudo apt-get clean

      - name: Create optimized Doxyfile
        run: |
          cat << 'EOF' > Doxyfile
          PROJECT_NAME           = "Trading Bot Documentation"
          PROJECT_NUMBER         = $GITHUB_SHA
          OUTPUT_DIRECTORY       = docs
          INPUT                  = ./src
          EXCLUDE                = */build/* */cmake-build-debug/* */tests/* */third_party/*
          RECURSIVE              = YES
          EXCLUDE_PATTERNS       = *.md *.txt
          FILE_PATTERNS          = *.h *.hpp *.c *.cpp *.py

          GENERATE_HTML          = YES
          HTML_OUTPUT            = .
          GENERATE_LATEX         = NO

          EXTRACT_ALL            = NO
          EXTRACT_PRIVATE        = NO
          EXTRACT_STATIC         = NO
          HIDE_UNDOC_MEMBERS     = YES
          HIDE_UNDOC_CLASSES     = YES

          HAVE_DOT               = YES
          UML_LOOK               = YES
          CALL_GRAPH             = NO
          CALLER_GRAPH           = NO
          COLLABORATION_GRAPH    = NO

          DISABLE_INDEX          = NO
          GENERATE_TREEVIEW      = NO
          FULL_PATH_NAMES        = NO
          SHOW_FILES            = NO
          SHOW_NAMESPACES       = NO
          OPTIMIZE_OUTPUT_FOR_C  = YES
          EOF

      - name: Generate documentation
        run: |
          mkdir -p docs
          doxygen Doxyfile
          touch docs/.nojekyll

      - name: Compress documentation
        run: |
          tar -czvf docs.tar.gz docs/
          mkdir -p compressed_docs
          mv docs.tar.gz compressed_docs/

      - name: Upload documentation artifact
        uses: actions/upload-artifact@v4
        with:
          name: documentation-compressed
          path: compressed_docs/docs.tar.gz
          retention-days: 1

      - name: Deploy to GitHub Pages
        if: github.ref == 'refs/heads/master'
        uses: peaceiris/actions-gh-pages@v3
        with:
          github_token: ${{ secrets.GITHUB_TOKEN }}
          publish_dir: ./docs
          keep_files: false
          force_orphan: true

  stock_market_availability:
    runs-on: ubuntu-22.04
    steps:
      - name: Checkout repository
        uses: actions/checkout@v3
      - name: Set permissions for availability script
        run: chmod +x ./Scripts/availability_check.sh
      - name: Check stock market availability
        run: ./Scripts/availability_check.sh

  setup-docker:
    runs-on: ubuntu-22.04
    needs: build
    steps:
      - name: Install Docker
        run: |
          sudo apt-get update && sudo apt-get install -y ca-certificates curl gnupg lsb-release
          sudo install -m 0755 -d /etc/apt/keyrings
          curl -fsSL https://download.docker.com/linux/ubuntu/gpg | sudo tee /etc/apt/keyrings/docker.asc > /dev/null
          sudo chmod a+r /etc/apt/keyrings/docker.asc
          echo "deb [arch=$(dpkg --print-architecture) signed-by=/etc/apt/keyrings/docker.asc] \
          https://download.docker.com/linux/ubuntu $(lsb_release -cs) stable" | sudo tee /etc/apt/sources.list.d/docker.list > /dev/null
          sudo apt-get update
          sudo apt-get install -y docker-ce docker-ce-cli containerd.io
      - name: Start Docker service
        run: sudo systemctl start docker
      - name: Verify Docker installation
        run: docker --version

  autotests:
    runs-on: ubuntu-22.04
    needs: [ stock_market_availability, setup-docker ]
    steps:
      - name: Checkout repository
        uses: actions/checkout@v3
      - name: Run autotest
        run: |
          sudo docker build -f CI/Dockerfile.autotesting -t testing .
          sudo docker run --rm testing

  backtests:
    runs-on: ubuntu-22.04
    needs: [ stock_market_availability, setup-docker ]
    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Build backtesting image
        run: |
          sudo docker build -f CI/Dockerfile.backtesting -t backtesting .
      - name: Create backtesting results
        run: |
          mkdir -p ${{ github.workspace }}/Backtesting/data/backtesting_results
      - name: Run backtesting container in detached mode
        id: run_container
        run: |
          CONTAINER_ID=$(sudo docker create backtesting)
          echo "::set-output name=id::$CONTAINER_ID"
          sudo docker start $CONTAINER_ID
          sudo docker wait $CONTAINER_ID
          sudo docker cp $CONTAINER_ID:/backtesting/Backtesting/data/backtesting_results ${{ github.workspace }}/Backtesting/data/backtesting_results
          sudo docker cp $CONTAINER_ID:/backtesting/StaticModels/ModelsMetrics ${{ github.workspace }}/StaticModels/ModelsMetrics
          sudo docker rm $CONTAINER_ID

      - name: Debug
        run: ls -R Backtesting/data/backtesting_results

      - name: Upload Backtesting Results
        uses: actions/upload-artifact@v4
        with:
          name: backtesting-results
          path: Backtesting/data/backtesting_results
          retention-days: 7

      - name: Upload Models Metrics
        uses: actions/upload-artifact@v4
        with:
          name: models-metrics
          path: StaticModels/ModelsMetrics
          retention-days: 7


