FROM debian:12 AS build-env

WORKDIR /backtesting

RUN apt-get update && apt-get install -y \
    build-essential \
    cmake \
    git \
    wget \
    curl \
    unzip \
    pkg-config \
    python3 \
    python3-pip \
    python3-venv \
    libboost-all-dev \
    libssl-dev && \
    apt-get clean && rm -rf /var/lib/apt/lists/*

# Создаем виртуальное окружение и устанавливаем Python-зависимости
RUN python3 -m venv /opt/venv
ENV PATH="/opt/venv/bin:$PATH"

COPY ./requirements.txt /backtesting/requirements.txt
RUN test -f /backtesting/requirements.txt && pip install --no-cache-dir -r /backtesting/requirements.txt || true

# Копируем весь проект
COPY . .

# Переходим в папку с исходниками Backtesting
WORKDIR /backtesting/Backtesting/src/

# Запускаем скрипт, который генерирует данные (файлы CSV должны сохраняться в data/scalping, data/backtesting_results и т.д.)
RUN python3 load_data_some_years.py
# Проверяем, что данные созданы
# Убираем старую папку сборки и создаем новую
RUN rm -rf /backtesting/Backtesting/build && mkdir -p /backtesting/Backtesting/build
WORKDIR /backtesting/Backtesting/build

RUN cmake ../ && make -j$(nproc)
RUN chmod +x backtesting && ./backtesting

#RUN ls -lah /backtesting/Backtesting/data/backtesting_results

# Финальный образ – копируем всё из build-env
FROM debian:12

WORKDIR /backtesting

# Устанавливаем Python в финальном образе
RUN apt-get update && apt-get install -y \
    python3 \
    python3-pip \
    python3-venv && \
    apt-get clean && rm -rf /var/lib/apt/lists/*

# Копируем всю директорию Backtesting из образа сборки
COPY --from=build-env /backtesting/Backtesting .

# Создаем виртуальное окружение в финальном образе
RUN python3 -m venv /opt/venv
ENV PATH="/opt/venv/bin:$PATH"

RUN ls -lah /backtesting/Backtesting/data/

WORKDIR /backtesting/Backtesting/src/

ENTRYPOINT ["python3", "show_metrics.py"]
