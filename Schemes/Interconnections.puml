@startuml
actor Client
queue API as api
database Database as db
collections MarketDataFetcher as market
component StrategySelector as selector
component Strategy as strategy
component RiskManager as risk
component TradingEngine as engine

Client -> api: JSON Instruction
api -> selector: Select strategy
selector -> strategy: Initialize Strategy

api -> market: Fetch Market Data
market --> api: Market Data Response

api -> risk: Check risk limits
risk --> api: Risk Check Passed

api -> strategy: Execute strategy with Market Data
strategy -> engine: Send trade orders

engine -> market: Place order on exchange
market --> engine: Order confirmation

engine -> db: Save trade

db -> api: Response with results
api -> Client: Final response with trade status
@enduml
